!<arch>
0-isupper.c/    0           0     0     644     244       `
#include "main.h"

/**
 * _isupper - function that checks for uppercase character.
 * @c: parameter passed
 * Return: 1 if c is uppercase and 0 otherwise
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}
0-memset.c/     0           0     0     644     286       `
#include "main.h"

/**
 * _memset - fills memory with a constant byte.
 * @s: pointer passed
 * @b: constant byte
 * @n: no. bytes to be filled in s
 * Return: s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		s[i] = b;
	return (s);
}
100-atoi.c/     0           0     0     644     19        `
#include "main.h"


1-isdigit.c/    0           0     0     644     228       `
#include "main.h"

/**
 * _isdigit - checks for a digit (0 through 9).
 * @c: parameter to be compared
 * Return: 1 on success 0 on failure
 */

int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
		return (1);
	else
		return (0);
}
1-memcpy.c/     0           0     0     644     307       `
#include "main.h"

/**
 * _memcpy -  copies memory area.
 * @dest: detsion passed
 * @src: source passed
 * @n: no. of bytes to copy from src to dest
 * Return: dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		dest[i] = src[i];
	return (dest);
}

1-strncat.c/    0           0     0     644     469       `
#include "main.h"

/**
 * _strncat - function that concatenates two strings
 * with a required amount of bytes to be appended
 * @dest: destination parameter passed
 * @src: source paramete passed
 * @n: required no. of bytes parameter
 * Return: dest
 */

char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	for (i = 0; dest[i] != '\0'; i++)
	{
	}
	for (j = 0; j < n && src[j] != '\0'; j++)
	{
		dest[i + j] = src[j];
	}
	dest[i + j] = '\0';
	return (dest);
}

2-strchr.c/     0           0     0     644     353       `
#include "main.h"
#include <stddef.h>

/**
 * _strchr - locates a character in a string.
 * @s: pointer passed
 * @c: character to be located
 * Return: null if character is not found or s if character
 * is found
 */

char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == c)
			return (s + i);
	}
	return (NULL);
}

2-strlen.c/     0           0     0     644     209       `
#include "main.h"

/**
 * _strlen - function that returns the length of a string.
 * @s: parameter passed
 * Return: 0
 */

int _strlen(char *s)
{
	int i;

	for (i = 0; s[i] != '\0'; i++)
	{
	}
	return (i);
}

2-strncpy.c/    0           0     0     644     394       `
#include "main.h"

/**
 * _strncpy - function that copies a string.
 * @dest: destination parameter passed
 * @src: source parameter passed
 * @n: max no. of characters to be copied
 * Return: dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; src[i] != '\0' && i < n; i++)
	{
		dest[i] = src[i];
	}
	for (; i < n; )
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}
3-islower.c/    0           0     0     644     243       `
#include "main.h"

/**
 * _islower - function that checks for lowercase character
 * @c: parameter checked
 * Return: 1 if c is lowercase and 0 otherwise
 */

int _islower(int c)
{
	if (c >= 97 && c <= 122)
		return (1);
	else
		return (0);
}

3-puts.c/       0           0     0     644     253       `
#include "main.h"

/**
 * _puts - function that prints a string, followed by a new line, to stdout
 * @str: parameter used
 * Return: 0
 */

void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     374       `
#include "main.h"

/**
 * _strcmp -  compares two strings.
 * @s1: parameter used
 * @s2: parameter used
 * Return: int
 */

int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; s1[i] != '\0' || s2[i] != '\0'; i++)
	{
		if (s1[i] != s2[i])
		{
			if (s1[i] < s2[i])
				return (s1[i] - s2[i]);
			else if (s1[i] > s2[i])
				return (s1[i] - s2[i]);
		}
	}
	return (0);
}
3-strspn.c/     0           0     0     644     571       `
#include "main.h"

/**
 * _strspn - gets the length of a prefix substring.
 * @s: pointer to string to be analyzed
 * @accept: pointer to set of characters to match
 * Return:  the number of bytes in the initial segment of s
 *  which consist only of bytes from accept1
 */

unsigned int _strspn(char *s, char *accept)
{
	int i, j, k, count;

	count = 0;
	for (i = 0; s[i] != '\0'; i++)
	{
		k = 0;
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				count = count + 1;
				k = 1;
			}
		}

		if (k == 0)
			return (count);
	}
	return (count);
}

4-isalpha.c/    0           0     0     644     299       `
#include "main.h"

/**
 * _isalpha - function that checks for alphabetic character
 * @c: parameter checked
 * Return: 1 if c is a letter, lowercase or uppercase
 * and 0 otherwise
 */

int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
		return (1);
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     481       `
#include "main.h"

/**
 * _strpbrk - searches a string for any of a set of bytes.
 * @s: pointer to string to be serached
 * @accept: pointer to string to search for
 * Return: a pointer to the byte in s that matches one of the bytes
 * in accept, or NULL if no such byte is found
 */

char *_strpbrk(char *s, char *accept)
{
/**	int i, j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
			}
		}
	}
	return (NULL);
*/}

5-strstr.c/     0           0     0     644     68        `
#include <stdio.h>

char *_strstr(char *haystack, char *needle)
{
}
6-abs.c/        0           0     0     644     231       `
#include "main.h"

/**
 * _abs - function that computes the absolute value of an integer
 * @i: parameter checked
 * Return: 0
 */

int _abs(int i)
{
	int absval;

	if (i < 0)
		absval = -i;
	else
		absval = i;
	return (absval);
}

9-strcpy.c/     0           0     0     644     425       `
#include "main.h"
#include <stdio.h>

/**
 * _strcpy - function that copies the string pointed to by src
 *  including the terminating null byte (\0),
 *  to the buffer pointed to by dest
 *  @dest: temporary varible copied to
 *  @src: parameter to be copied
 *  Return: dest
 */

char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';
	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

